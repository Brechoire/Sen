"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# Charger les variables d'environnement depuis le fichier .env
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY', 'django-insecure-7q8m2mjez4%w0!1vlky_1ikq1fzfs*!szbmlmu=hc0j4nfjds7')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG', 'True').lower() in ('true', '1', 'yes')

ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "ckeditor",
    "ckeditor_uploader",
    "accounts",
    "home",
    "news",
    "author",
    "shop",
    "admin_panel",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# Configuration pour la gestion des erreurs personnalisées
if not DEBUG:
    # En production, désactiver l'affichage des erreurs détaillées
    ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')
    
    # Configuration de logging simplifiée pour la production
    # Utilise les logs système au lieu de fichiers locaux
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'level': 'ERROR',
                'class': 'logging.StreamHandler',
                'formatter': 'verbose'
            },
        },
        'loggers': {
            'django': {
                'handlers': ['console'],
                'level': 'ERROR',
                'propagate': False,
            },
        },
    }

WSGI_APPLICATION = "app.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = os.environ.get('LANGUAGE_CODE', 'fr-fr')

TIME_ZONE = os.environ.get('TIME_ZONE', 'Europe/Paris')

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

# Static files configuration pour la production
STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# STATICFILES_DIRS doit toujours contenir les répertoires sources des fichiers statiques
# pour que collectstatic puisse les trouver et les copier vers STATIC_ROOT
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Media files
MEDIA_URL = os.environ.get('MEDIA_URL', '/media/')
MEDIA_ROOT = BASE_DIR / os.environ.get('MEDIA_ROOT', 'media')

# Configuration de sécurité pour HTTPS (si vous avez un certificat SSL)
if not DEBUG:
    SECURE_SSL_REDIRECT = os.environ.get('SECURE_SSL_REDIRECT', 'False').lower() in ('true', '1', 'yes')
    SECURE_PROXY_SSL_HEADER = tuple(os.environ.get('SECURE_PROXY_SSL_HEADER', 'HTTP_X_FORWARDED_PROTO,https').split(','))

# CKEditor Configuration
CKEDITOR_UPLOAD_PATH = os.environ.get('CKEDITOR_UPLOAD_PATH', 'uploads/')
CKEDITOR_IMAGE_BACKEND = "pillow"

CKEDITOR_CONFIGS = {
    'default': {
        'toolbar': 'Custom',
        'height': 300,
        'width': '100%',
        'toolbar_Custom': [
            ['Styles', 'Format'],
            ['Bold', 'Italic', 'Underline'],
            ['NumberedList', 'BulletedList', '-', 'Outdent', 'Indent', '-', 'JustifyLeft', 'JustifyCenter', 'JustifyRight', 'JustifyBlock'],
            ['Link', 'Unlink'],
            ['RemoveFormat', 'Source'],
            ['Image', 'Table', 'HorizontalRule'],
            ['TextColor', 'BGColor'],
            ['FontSize'],
            ['Blockquote'],
        ],
        'extraPlugins': ','.join([
            'uploadimage', # the upload image feature
            'div',
            'autolink',
            'autoembed',
            'embedsemantic',
            'autogrow',
            'widget',
            'lineutils',
            'clipboard',
            'dialog',
            'dialogui',
            'elementspath'
        ]),
        'removePlugins': 'exportpdf',  # Désactiver le plugin PDF qui cause l'erreur
        'language': 'fr',
        'uiColor': '#f0f0f0',
        'format_tags': 'p;h1;h2;h3;h4;h5;h6;pre;address;div',
        'stylesSet': [
            {'name': 'Titre 1', 'element': 'h1', 'styles': {'font-size': '2.5em', 'font-weight': 'bold', 'color': '#2A5C4A'}},
            {'name': 'Titre 2', 'element': 'h2', 'styles': {'font-size': '2em', 'font-weight': 'bold', 'color': '#2A5C4A'}},
            {'name': 'Titre 3', 'element': 'h3', 'styles': {'font-size': '1.5em', 'font-weight': 'bold', 'color': '#2A5C4A'}},
            {'name': 'Titre 4', 'element': 'h4', 'styles': {'font-size': '1.25em', 'font-weight': 'bold', 'color': '#2A5C4A'}},
            {'name': 'Titre 5', 'element': 'h5', 'styles': {'font-size': '1.1em', 'font-weight': 'bold', 'color': '#2A5C4A'}},
            {'name': 'Titre 6', 'element': 'h6', 'styles': {'font-size': '1em', 'font-weight': 'bold', 'color': '#2A5C4A'}},
            {'name': 'Paragraphe', 'element': 'p'},
            {'name': 'Citation', 'element': 'blockquote', 'styles': {'border-left': '4px solid #2A5C4A', 'padding-left': '20px', 'font-style': 'italic'}},
        ],
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
# Configuration du modèle utilisateur personnalisé
AUTH_USER_MODEL = 'accounts.User'

# Backend d'authentification personnalisé
AUTHENTICATION_BACKENDS = [
    'accounts.backends.EmailBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# Configuration PayPal
# Configuration PayPal
PAYPAL_CLIENT_ID = os.environ.get('PAYPAL_CLIENT_ID', 'test_client_id')
PAYPAL_CLIENT_SECRET = os.environ.get('PAYPAL_CLIENT_SECRET', 'test_client_secret')
PAYPAL_MODE = os.environ.get('PAYPAL_MODE', 'sandbox')

# Mode debug pour PayPal
PAYPAL_DEBUG = os.environ.get('PAYPAL_DEBUG', 'True').lower() == 'true'

# Configuration Email
EMAIL_HOST = os.environ.get('EMAIL_HOST', '')
EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 587))
EMAIL_USE_TLS = os.environ.get('EMAIL_USE_TLS', 'True').lower() in ('true', '1', 'yes')
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'noreply@editionssen.fr')
CONTACT_EMAIL = os.environ.get('CONTACT_EMAIL', 'contact@editionssen.fr')

# Configuration de la boutique
SHOP_NAME = os.environ.get('SHOP_NAME', 'Éditions Sen')
SHOP_EMAIL = os.environ.get('SHOP_EMAIL', 'contact@editions-sen.com')
SHOP_PHONE = os.environ.get('SHOP_PHONE', '')

# Configuration des paramètres de livraison par défaut
FREE_SHIPPING_THRESHOLD = float(os.environ.get('FREE_SHIPPING_THRESHOLD', 60.00))
STANDARD_SHIPPING_COST = float(os.environ.get('STANDARD_SHIPPING_COST', 5.90))
TAX_RATE = float(os.environ.get('TAX_RATE', 5.5))
